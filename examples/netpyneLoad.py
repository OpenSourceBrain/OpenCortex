'''
NetPyNE simulator compliant export for:

Components:
    RS (Type: izhikevich2007Cell:  v0=-0.06 (SI voltage) k=7.0E-7 (SI conductance_per_voltage) vr=-0.06 (SI voltage) vt=-0.04 (SI voltage) vpeak=0.035 (SI voltage) a=30.0 (SI per_time) b=-2.0E-9 (SI conductance) c=-0.05 (SI voltage) d=1.0E-10 (SI current) C=1.0E-10 (SI capacitance))
    null (Type: notes)
    null (Type: property)
    null (Type: include)
    syn0 (Type: expTwoSynapse:  tauRise=5.0E-4 (SI time) tauDecay=0.01 (SI time) peakTime=0.0015767011966073639 (SI time) waveformFactor=1.232399909181873 (dimensionless) gbase=2.0E-9 (SI conductance) erev=0.0 (SI voltage))
    poissonFiringSyn (Type: poissonFiringSynapse:  averageRate=50.0 (SI per_time) averageIsi=0.02 (SI time))
    SimpleNet (Type: network)
    Sim_SimpleNet (Type: Simulation:  length=0.5 (SI time) step=2.5E-5 (SI time))


    This NetPyNE file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.4.5
         org.neuroml.model   v1.4.5
         jLEMS               v0.9.8.5

'''
# Main NetPyNE script for: SimpleNet

# See https://github.com/Neurosim-lab/netpyne

from netpyne import init  # import netpyne init module


###############################################################################
# NETWORK PARAMETERS
###############################################################################

netParams = {}  # dictionary to store sets of network parameters

# Cell properties list
netParams['cellParams'] = []

next_gid = 0
gids = {} # Require these in this file for plotting etc.

     
# cell params for cell RS in population RS_pop
cellRule = {'label': 'RS_pop', 'conditions': {'cellType': 'RS'}, 'sections': {}}
RS_pop_soma = {'geom': {}, 'topol': {}, 'mechs': {}, 'pointps':{}, 'syns': {}}  #  soma
RS_pop_soma['pointps']['RS'] = { '_type':'RS', 'v0':-60.0,  'k':7.0E-4,  'vr':-60.0,  'vt':-40.0,  'vpeak':35.0,  'a':0.030000001,  'b':-0.0019999999,  'c':-50.0,  'd':0.1,  'C':1.00000005E-4,  } 

# Todo: work this out here from area etc.
cm = (318309 * RS_pop_soma['pointps']['RS']['C'] if RS_pop_soma['pointps']['RS'].has_key('C') else 318.31927 )

RS_pop_soma['geom'] = {'diam': 10, 'L': 10, 'Ra': 1, 'cm': cm}

cellRule['sections'] = {'soma': RS_pop_soma}  # add sections to dict
netParams['cellParams'].append(cellRule)  # add dict to list of cell properties


# SIMULATION PARAMETERS

simConfig = {}  # dictionary to store simConfig

# Simulation parameters
simConfig['duration'] = simConfig['tstop'] = 500.0 # Duration of the simulation, in ms
simConfig['dt'] = 0.024999999 # Internal integration timestep to use
simConfig['randseed'] = 1 # Random seed to use
simConfig['createNEURONObj'] = 1  # create HOC objects when instantiating network
simConfig['createPyStruct'] = 1  # create Python structure (simulator-independent) when instantiating network
simConfig['verbose'] = True  # show detailed messages 

# Recording 
simConfig['recordCells'] = ['all']  
simConfig['recordTraces'] = {'Vsoma':{'sec':'soma','loc':0.5,'var':'v'}}

simConfig['plotCells'] = ['all']
# Display id: DispPop__RS_pop
# Line id: RS_pop[0]: v; displaying v on cell: 0 in population: RS_pop;


simConfig['recordStim'] = True  # record spikes of cell stims
simConfig['recordStep'] = simConfig['dt'] # Step size in ms to save data (eg. V traces, LFP, etc)



# Analysis and plotting 
simConfig['plotRaster'] = True # Whether or not to plot a raster
simConfig['plotLFPSpectrum'] = False # plot power spectral density
simConfig['maxspikestoplot'] = 3e8 # Maximum number of spikes to plot
simConfig['plotConn'] = False # whether to plot conn matrix
simConfig['plotWeightChanges'] = False # whether to plot weight changes (shown in conn matrix)
#simConfig['plot3dArch'] = True # plot 3d architecture

# Saving
simConfig['filename'] = 'SimpleNet.txt'  # Set file output name
simConfig['saveFileStep'] = simConfig['dt'] # step size in ms to save data to disk
simConfig['saveDat'] = True # save to dat file




import netpyne.framework as f
import netpyne.utils as npUtils


npUtils.importNeuroML2Network('SimpleNet.net.nml', netParams, simConfig)


f.net.connectCells()                # create connections between cells based on params


f.net.addStims()                    # add external stimulation to cells (IClamps etc)
f.sim.setupRecording()              # setup variables to record for each cell (spikes, V traces, etc)
f.sim.runSim()                      # run parallel Neuron simulation  
f.sim.gatherData()                  # gather spiking data and cell info from each node
f.sim.saveData()                    # save params, cell info and sim output to file (pickle,mat,txt,etc)
f.analysis.plotData()               # plot spike raster

#f.sim.exportNeuroML2("Test",lems=False)     # export cells and connectivity to NeuroML 2 format
from neuron import h
h('forall psection()')

print("Finished...")